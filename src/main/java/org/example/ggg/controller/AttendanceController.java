package org.example.ggg.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import org.example.ggg.model.AttendanceModel;
import org.example.ggg.dto.AttendanceDto;

import java.sql.SQLException;
import java.util.List;

public class AttendanceController {

    @FXML
    private TextField txtAttendanceId;

    @FXML
    private TextField txtEmployeeId;

    @FXML
    private TextField txtDate;

    @FXML
    private TextField txtStatus;

    @FXML
    private TextField txtRemarks;

    @FXML
    private TextField txtSearch;

    @FXML
    private TableView<AttendanceDto> tblAttendance;

    @FXML
    private TableColumn<AttendanceDto, String> colAttendanceId;

    @FXML
    private TableColumn<AttendanceDto, String> colEmployeeId;

    @FXML
    private TableColumn<AttendanceDto, String> colDate;

    @FXML
    private TableColumn<AttendanceDto, String> colStatus;

    @FXML
    private TableColumn<AttendanceDto, String> colRemarks;

    @FXML
    private Button btnAdd;

    @FXML
    private Button btnUpdate;

    @FXML
    private Button btnDelete;

    @FXML
    private Button btnReset;

    @FXML
    public void initialize() {
        colAttendanceId.setCellValueFactory(cellData -> cellData.getValue().attendanceIdProperty());
        colEmployeeId.setCellValueFactory(cellData -> cellData.getValue().employeeIdProperty());
        colDate.setCellValueFactory(cellData -> cellData.getValue().dateProperty());
        colStatus.setCellValueFactory(cellData -> cellData.getValue().statusProperty());
        colRemarks.setCellValueFactory(cellData -> cellData.getValue().remarksProperty());

        loadAttendanceTable();

        toggleButtons(true);

        tblAttendance.setOnMouseClicked(this::handleTableClick);

        txtSearch.textProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal.trim().isEmpty()) {
                loadAttendanceTable();
            }
        });
    }

    private void loadAttendanceTable() {
        try {
            List<AttendanceDto> attendanceList = AttendanceModel.getAllAttendance();
            ObservableList<AttendanceDto> observableList = FXCollections.observableArrayList(attendanceList);
            tblAttendance.setItems(observableList);
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Load Error", "Failed to load attendance records: " + e.getMessage());
        }
    }

    @FXML
    public void AddToAttendance(ActionEvent actionEvent) {
        if (isInputValid()) {
            try {
                AttendanceDto attendance = new AttendanceDto(
                        null, // auto-generated by DB
                        txtEmployeeId.getText().trim(),
                        txtDate.getText().trim(),
                        txtStatus.getText().trim(),
                        txtRemarks.getText().trim()
                );

                String resultMessage = AttendanceModel.addAttendance(attendance);
                showAlert("Info", resultMessage);
                loadAttendanceTable();
                clearFields();
            } catch (SQLException | ClassNotFoundException e) {
                showAlert("Error", "Database error: " + e.getMessage());
            }
        }
    }

    @FXML
    public void UpdateToAttendance(ActionEvent actionEvent) {
        if (isInputValid()) {
            if (txtAttendanceId.getText().trim().isEmpty()) {
                showAlert("Validation Error", "Please select a record to update.");
                return;
            }
            try {
                AttendanceDto attendance = new AttendanceDto(
                        txtAttendanceId.getText().trim(),
                        txtEmployeeId.getText().trim(),
                        txtDate.getText().trim(),
                        txtStatus.getText().trim(),
                        txtRemarks.getText().trim()
                );

                String resultMessage = AttendanceModel.updateAttendance(attendance);
                showAlert("Info", resultMessage);
                loadAttendanceTable();
                clearFields();
                toggleButtons(true);
            } catch (SQLException | ClassNotFoundException e) {
                showAlert("Error", "Database error: " + e.getMessage());
            }
        }
    }

    @FXML
    public void DeleteToAttendance(ActionEvent actionEvent) {
        String attendanceId = txtAttendanceId.getText().trim();
        if (attendanceId.isEmpty()) {
            showAlert("Error", "Please select a record to delete.");
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure to delete Attendance ID: " + attendanceId + "?", ButtonType.YES, ButtonType.NO);
        alert.showAndWait();

        if (alert.getResult() == ButtonType.YES) {
            try {
                String resultMessage = AttendanceModel.deleteAttendance(attendanceId);
                showAlert("Info", resultMessage);
                loadAttendanceTable();
                clearFields();
                toggleButtons(true);
            } catch (SQLException | ClassNotFoundException e) {
                showAlert("Error", "Database error: " + e.getMessage());
            }
        }
    }

    @FXML
    public void ResetAttendance(ActionEvent actionEvent) {
        clearFields();
        loadAttendanceTable();
        toggleButtons(true);
        txtSearch.clear();
    }

    @FXML
    public void SearchAttendance(ActionEvent actionEvent) {
        String searchKey = txtSearch.getText().trim().toLowerCase();

        if (searchKey.isEmpty()) {
            showAlert("Search Error", "Please enter a search term.");
            return;
        }

        try {
            List<AttendanceDto> allData = AttendanceModel.getAllAttendance();
            ObservableList<AttendanceDto> filteredData = FXCollections.observableArrayList();

            for (AttendanceDto dto : allData) {
                String attendanceId = dto.getAttendanceId().toLowerCase();
                String employeeId = dto.getEmployeeId().toLowerCase();

                if (attendanceId.contains(searchKey) || employeeId.contains(searchKey)) {
                    filteredData.add(dto);
                }
            }

            if (filteredData.isEmpty()) {
                showAlert("Search Result", "No matching records found.");
            }

            tblAttendance.setItems(filteredData);

        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Search Error", "Failed to perform search: " + e.getMessage());
        }
    }

    private void handleTableClick(MouseEvent event) {
        AttendanceDto selected = tblAttendance.getSelectionModel().getSelectedItem();
        if (selected != null) {
            txtAttendanceId.setText(selected.getAttendanceId());
            txtEmployeeId.setText(selected.getEmployeeId());
            txtDate.setText(selected.getDate());
            txtStatus.setText(selected.getStatus());
            txtRemarks.setText(selected.getRemarks());

            toggleButtons(false);
        }
    }

    private void toggleButtons(boolean isAddMode) {
        btnAdd.setDisable(!isAddMode);
        btnUpdate.setDisable(isAddMode);
        btnDelete.setDisable(isAddMode);
    }

    private void clearFields() {
        txtAttendanceId.clear();
        txtEmployeeId.clear();
        txtDate.clear();
        txtStatus.clear();
        txtRemarks.clear();
    }

    private boolean isInputValid() {
        if (txtEmployeeId.getText().trim().isEmpty()) {
            showAlert("Validation Error", "Employee ID is required.");
            return false;
        }
        if (txtDate.getText().trim().isEmpty()) {
            showAlert("Validation Error", "Date is required.");
            return false;
        }
        if (txtStatus.getText().trim().isEmpty()) {
            showAlert("Validation Error", "Status is required.");
            return false;
        }
        // Remarks can be optional
        return true;
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
