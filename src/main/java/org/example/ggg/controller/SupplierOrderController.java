package org.example.ggg.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import org.example.ggg.dto.SupplierOrderDto;
import org.example.ggg.model.SupplierOrderModel;

import java.sql.SQLException;
import java.util.ArrayList;

public class SupplierOrderController {

    @FXML
    private TableView<SupplierOrderDto> tblSupplierOrder;
    @FXML
    private TableColumn<SupplierOrderDto, String> colOrderId, colOrderDate, colSupplierId;
    @FXML
    private TextField txtOrderId, txtOrderDate, txtSupplierId, txtSearch;

    @FXML
    public void initialize() {
        colOrderId.setCellValueFactory(new PropertyValueFactory<>("supplierOrderId"));
        colOrderDate.setCellValueFactory(new PropertyValueFactory<>("date"));
        colSupplierId.setCellValueFactory(new PropertyValueFactory<>("supplierId"));

        loadSupplierOrderTable();
    }

    private void loadSupplierOrderTable() {
        try {
            ArrayList<SupplierOrderDto> supplierOrders = SupplierOrderModel.getAllSupplierOrders();
            ObservableList<SupplierOrderDto> observableList = FXCollections.observableArrayList(supplierOrders);
            tblSupplierOrder.setItems(observableList);
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Error", "Failed to load supplier orders: " + e.getMessage());
        }
    }

    @FXML
    private void AddToSupplierOrder() {
        // Create a SupplierOrderDto with null as supplierOrderId (auto-generated by the database)
        SupplierOrderDto supplierOrderDto = new SupplierOrderDto(
                null, // SupplierOrderId is auto-generated
                txtOrderDate.getText(),
                txtSupplierId.getText()
        );

        try {
            String result = SupplierOrderModel.saveSupplierOrder(supplierOrderDto);
            showAlert("Info", result);
            loadSupplierOrderTable(); // Refresh the table
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Error", "Failed to add supplier order: " + e.getMessage());
        }
    }


    @FXML
    private void UpdateSupplierOrder() {
        SupplierOrderDto supplierOrderDto = new SupplierOrderDto(
                txtOrderId.getText(),
                txtOrderDate.getText(),
                txtSupplierId.getText()
        );

        try {
            String result = SupplierOrderModel.updateSupplierOrder(supplierOrderDto);
            showAlert("Info", result);
            loadSupplierOrderTable();
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Error", "Failed to update supplier order: " + e.getMessage());
        }
    }

    @FXML
    private void DeleteSupplierOrder() {
        try {
            String result = SupplierOrderModel.deleteSupplierOrder(txtOrderId.getText());
            showAlert("Info", result);
            loadSupplierOrderTable();
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Error", "Failed to delete supplier order: " + e.getMessage());
        }
    }

    @FXML
    private void SearchSupplierOrder() {
        try {
            String supplierId = txtSearch.getText();
            ArrayList<SupplierOrderDto> searchResults = SupplierOrderModel.getSupplierOrdersBySupplierId(supplierId);
            ObservableList<SupplierOrderDto> observableList = FXCollections.observableArrayList(searchResults);
            tblSupplierOrder.setItems(observableList);

            if (searchResults.isEmpty()) {
                showAlert("Info", "No records found for Supplier ID: " + supplierId);
            }
        } catch (SQLException | ClassNotFoundException e) {
            showAlert("Error", "Failed to search supplier orders: " + e.getMessage());
        }
    }

    @FXML
    private void ResetSupplierOrder() {
        resetFields(); // Clear all input fields
        loadSupplierOrderTable(); // Reload the table with all supplier orders
        showAlert("Info", "Supplier Order Form has been reset successfully!");
    }

    private void resetFields() {
        txtOrderId.clear();
        txtOrderDate.clear();
        txtSupplierId.clear();
        txtSearch.clear();
        tblSupplierOrder.getSelectionModel().clearSelection();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
